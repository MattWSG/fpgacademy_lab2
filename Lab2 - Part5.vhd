LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.numeric_std.all;

--
-- Based upon Golden_top generated by Terasic System Builder
-- Sourced from janaite on GitHub
--
ENTITY top IS
	Port (
		-- CLOCK
		ADC_CLK_10 		: in std_logic;
		MAX10_CLK1_50 	: in std_logic;
		MAX10_CLK2_50 	: in std_logic;

		-- SDRAM
		DRAM_DQ 		: in std_logic_vector(15 downto 0);
		DRAM_ADDR 	: out std_logic_vector(12 downto 0);
		DRAM_BA 		: out std_logic_vector(1 downto 0);
		DRAM_CAS_N 	: out std_logic;
		DRAM_CKE 	: out std_logic;
		DRAM_CLK 	: out std_logic;
		DRAM_CS_N 	: out std_logic;
		DRAM_LDQM 	: out std_logic;
		DRAM_RAS_N 	: out std_logic;
		DRAM_UDQM 	: out std_logic;
		DRAM_WE_N 	: out std_logic;

		-- SEG7
		HEX0 : out std_logic_vector (7 downto 0) := (others => '1');
		HEX1 : out std_logic_vector (7 downto 0) := (others => '1');
		HEX2 : out std_logic_vector (7 downto 0) := (others => '1');
		HEX3 : out std_logic_vector (7 downto 0) := (others => '1');
		HEX4 : out std_logic_vector (7 downto 0) := (others => '1');
		HEX5 : out std_logic_vector (7 downto 0) := (others => '1');

		-- KEY
		KEY : in std_logic_vector (1 downto 0);

		-- LED
		LEDR 	: out std_logic_vector (9 downto 0);

		-- SW
		SW : in 	std_logic_vector (9 downto 0);

		-- VGA
		VGA_B 	:  out std_logic_vector (3 downto 0);
		VGA_G 	:  out std_logic_vector (3 downto 0);
		VGA_HS	:  out std_logic;
		VGA_R 	:  out std_logic_vector (3 downto 0);
		VGA_VS 	:  out std_logic;

		
		-- Accelerometer
		GSENSOR_CS_N 	: out std_logic;
		GSENSOR_SCLK 	: out std_logic;
		GSENSOR_INT 	: in std_logic_vector (2 downto 1); 
		GSENSOR_SDI 	: in std_logic;
		GSENSOR_SDO 	: in std_logic;

		-- Arduino
		ARDUINO_IO 			: in std_logic_vector (15 downto 0);
		ARDUINO_RESET_N 	: in std_logic;

		-- GPIO, GPIO connect to GPIO Default
		GPIO : in std_logic_vector(35 downto 0)
	);
END top;

architecture top_arch of top is

	signal SegZero : std_logic_vector(3 downto 0);
	signal Cout : std_logic;
	signal A, B, Cin, T, Z : integer;

	begin
		
		A <= to_integer(unsigned(SW(7 downto 4)));
		B <= to_integer(unsigned(SW(3 downto 0)));
		Cin <= 1 when (SW(8) = '1') else 0;
		T <= A+B+Cin;
		
		if_statement : process(T, Z, Cout) is
		begin
			if T > 9 then
				Z <= 10;
				Cout <= '1';
			else
				Z <= 0;
				Cout <= '0';
			end if;
		end process;
		
		SegZero <= std_logic_vector(to_unsigned(T-Z, 4));
		
		HEX1 <= "11111001" when (Cout = '1') else "11111111";
		
		sevSegDecode : process (SegZero) is
		begin
			case SegZero is
				when "0000" => HEX0 <= "11000000"; -- 0
				when "0001" => HEX0 <= "11111001"; -- 1
				when "0010" => HEX0 <= "10100100"; -- 2
				when "0011" => HEX0 <= "10110000"; -- 3
				when "0100" => HEX0 <= "10011001"; -- 4
				when "0101" => HEX0 <= "10010010"; -- 5
				when "0110" => HEX0 <= "10000010"; -- 6
				when "0111" => HEX0 <= "11111000"; -- 7
				when "1000" => HEX0 <= "10000000"; -- 8
				when "1001" => HEX0 <= "10011000"; -- 9
				when others => HEX0 <= "10110000"; -- E (Error)
			end case;
		end process;
		
end architecture;

